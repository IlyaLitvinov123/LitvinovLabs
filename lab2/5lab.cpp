#include <iostream>
#include <fstream>
#include <array>
#include <string>
#include <vector>

enum class Gender {
    Male,
    Female
};

struct Person {
    std::array<char, 20> name;
    int age;
    Gender gender;
};

// функция для сериализации строки в поток вывода
bool serializeString(const std::array<char, 20>& str, std::ostream& stream) {
    // запись каждого символа строки в поток, проверка на наличие нулевого символа или запятой
    for (const char& c : str) {
        if (c == '\0' || c == ',') {
            return false; // возврат false, если найдена запятая или нулевой символ
        }
        stream << c;
    }
    return true; // возврат true, если сериализация прошла успешно
}

// функция для сериализации целочисленного значения в поток вывода
bool serializeInt(int value, std::ostream& stream) {
    stream << value; // запись значения в поток
    return true; // возврат true, если сериализация прошла успешно
}

// функция для сериализации значения enum Gender в поток вывода
bool serializeGender(Gender gender, std::ostream& stream) {
    // запись значения enum в виде символа или строки в поток
    switch (gender) {
    case Gender::Male:
        stream << "M"; // мужской пол представляется как "M"
        break;
    case Gender::Female:
        stream << "F"; // женский пол представляется как "F"
        break;
    }
    return true; // возврат true, если сериализация прошла успешно
}

// функция для сериализации объекта Person в поток вывода
bool serializePerson(const Person& person, std::ostream& stream) {
    // сериализация каждого поля объекта Person, разделение значений запятыми
    if (!serializeString(person.name, stream) || !stream << ',' || !serializeInt(person.age, stream) || !stream << ',' || !serializeGender(person.gender, stream)) {
        return false; // возврат false, если сериализация не удалась
    }
    return true; // возврат true, если сериализация прошла успешно
}

// функция для десериализации строки из потока в массив символов
bool deserializeString(std::array<char, 20>& buffer, std::istream& stream) {
    // считывание строки из потока до запятой, запись в массив символов
    stream.getline(buffer.data(), 20, ',');
    return !stream.fail(); // возврат true, если операция считывания прошла успешно
}

// функция для десериализации целочисленного значения из потока
bool deserializeInt(int& value, std::istream& stream) {
    stream >> value; // считывание целочисленного значения из потока
    return !stream.fail(); // возврат true, если операция считывания прошла успешно
}

// функция для десериализации значения enum Gender из потока
bool deserializeGender(Gender& gender, std::istream& stream) {
    char genderChar;
    stream >> genderChar;

    switch (genderChar) {
    case 'M':
        gender = Gender::Male; // присвоение значения Male, если считанный символ - 'M'
        break;
    case 'F':
        gender = Gender::Female; // присвоение значения Female, если считанный символ - 'F'
        break;
    default:
        return false; // возврат false, если значение неопределенное
    }
    return true; // возврат true, если операция прошла успешно
}

// функция для десериализации объекта Person из потока
bool deserializePerson(Person& person, std::istream& stream) {
    // десериализация каждого поля объекта Person из потока, ожидается разделение значений запятыми
    if (!deserializeString(person.name, stream) || !deserializeInt(person.age, stream) || !deserializeGender(person.gender, stream)) {
        return false; // возврат false, если десериализация не удалась
    }
    return true; // возврат true, если десериализация прошла успешно
}

// функция для сериализации вектора объектов Person в поток вывода
bool serializePeople(const std::vector<Person>& people, std::ostream& stream) {
    for (const auto& person : people) {
        if (!serializePerson(person, stream) || !stream << '\n') {
            return false; // возврат false, если сериализация не удалась
        }
    }
    return true; // возврат true, если сериализация прошла успешно
}

// функция для десериализации вектора объектов Person из потока
bool deserializePeople(std::vector<Person>& people, std::istream& stream) {
    std::string line;
    while (std::getline(stream, line)) {
        Person person;
        if (!deserializePerson(person, stream)) {
            return false; // возврат false, если десериализация не удалась
        }
        people.push_back(person); // добавление объекта в вектор
    }
    return true; // возврат true, если десериализация прошла успешно
}

int main() {
    // ... (код для работы с файлами)
    return 0;
}